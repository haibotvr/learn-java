package com.simon.learn.designpattern.singleton;import java.lang.reflect.Constructor;/** * 单例模式描述 * * @author simon.wei */public class Description {    /**     * 单例类只能有一个实例     * 单例类必须自己创建自己的唯一实例     * 单例类必须给所有其他对象提供这一实例     */    public static void main(String[] args) throws Exception {        LazyHolderClassSingleton instance1 = LazyHolderClassSingleton.getInstance();        LazyHolderClassSingleton instance2 = LazyHolderClassSingleton.getInstance();        System.out.println(instance1);        System.out.println(instance2);        Class<?> calzz = LazyHolderClassSingleton.class;        Constructor<?> constructor = calzz.getDeclaredConstructor();        constructor.setAccessible(true);        Object instance = constructor.newInstance();        System.out.println(instance);    }}